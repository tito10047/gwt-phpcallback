<?php

/**
* Parsing object to/from JSON String
*/
class JsonParsingObjectABS{
    
    /**
    * Parse JSONObject to $targetObject 
    * 
    * @param array(String) $targetObjectParmsTypes like {array("String[]","int[])}
    * @param arrat(String) $properities proprties names in compressed object. by generated by GwtRpcObjectABS
    * @param String $JSONobject  
    * @param Object $targetObject target object extended by GwtRpcObjectABS
    */
    public static function __parseFromJSONobject($targetObjectParmsTypes, $properities, $JSONobject, &$targetObject){
        if ($JSONobject==null) return;
        global $G__primitiveTypes;
        $isArray = false;
        $isPrimitive = false;
        foreach ($JSONobject as $JSONobjectParmName=>$JSONobjectParmValue){
            $targetObjectProperityIndex = count($properities);
            for ($i=0;$i<$targetObjectProperityIndex;$i++){
                if ($properities[$i]==$JSONobjectParmName){
                    $targetObjectProperityIndex=$i;
                    break;
                }
            }
            if ($targetObjectProperityIndex == count($properities)) {trigger_error("variable $JSONobjectParmName not find in object");}
            
            $targetObjectParmType = $targetObjectParmsTypes[$targetObjectProperityIndex];
            if (isArrayType($targetObjectParmType)){
                $isArray = true;
            }
            if (isPrimitiveType($targetObjectParmType)){
                $isPrimitive = true;
            }
            if ($isPrimitive){
                $targetObject->$JSONobjectParmName=$JSONobjectParmValue;
                switch ($targetObjectParmType){
                    case "String":  break;
                    case "int":     self::__convertToInt($targetObject->$JSONobjectParmName);      break;
                    case "double":  self::__convertToDouble($targetObject->$JSONobjectParmName);   break;
                    case "boolean": self::__convertToBoolean($targetObject->$JSONobjectParmName);  break;
                    case "char":    self::__convertToInt($targetObject->$JSONobjectParmName);      break;
                    case "byte":    self::__convertToInt($targetObject->$JSONobjectParmName);      break;
                    case "short":   self::__convertToInt($targetObject->$JSONobjectParmName);      break;
                    case "long":    self::__convertToInt($targetObject->$JSONobjectParmName);      break;
                    case "float":   self::__convertToDouble($targetObject->$JSONobjectParmName);   break;
                    default: trigger_error("cant find primitive type for '$parm'");
                }
            }else{
                autoloadclass($targetObjectParmType);
                if ($isArray){
                    $objectArray = array();
                    foreach($JSONobjectParmValue as $JSONsubObject){
                        if ($JSONsubObject==null) {
                            $objectArray[]=null;
                            continue;
                        }
                        $object = new $targetObjectParmType();
                        $object->parseFromJSONobject($JSONsubObject);
                        $objectArray[]=$object;
                    }
                    $targetObject->$JSONobjectParmName=$objectArray;
                }else{
                    $object = new $targetObjectParmType();
                    if ($JSONobjectParmValue==null) {
                        $targetObject->$JSONobjectParmName=null;
                        continue;
                    }
                    $object->parseFromJSONarray($JSONobjectParmValue);
                    $targetObject->$JSONobjectParmName=$object;
                }
            }
            
            $isPrimitive = false;
            $isArray = false;
        }
    }
    protected function __convertToInt(&$array){
        if (is_array($array)){
            foreach ($array as $arrayParmName=>$arrayParmValue){
                if ($arrayParmValue == ""){
                    $array[$arrayParmName]=null;
                    continue;
                }
                $array[$arrayParmName]=(int)$arrayParmValue;
            }
        }else{
            if ($array == ""){
                $array=null;
            }else
            $array = (int)$array;
        }
    }
    protected function __convertToDouble(&$array){
        if (is_array($array)){
            foreach ($array as $arrayParmName=>$arrayParmValue){
                if ($arrayParmValue == ""){
                    $array[$arrayParmName]=null;
                    continue;
                }
                $array[$arrayParmName]=(double)$arrayParmValue;
            }
        }else{
            if ($array == ""){
                $array=null;
            }else
            $array = (double)$array;
        }
    }
    protected function __convertToBoolean(&$array){
        if (is_array($array)){
            foreach ($array as $arrayParmName=>$arrayParmValue){
                if ($arrayParmValue == ""){
                    $array[$arrayParmName]=false;
                    continue;
                }
                $array[$arrayParmName]=(boolean)$arrayParmValue;
            }
        }else{
            if ($array == ""){
                $array=false;
            }else
            $array = (boolean)$array;
        }
    }
}

?>
